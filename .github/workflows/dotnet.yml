
# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  id-token: write  # Allows the workflow to request an OIDC token
  contents: read

jobs:

  SecretsScan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  Format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      working-directory: ./DotNet.Pipeline
      run: dotnet restore
    - name: Format
      working-directory: ./DotNet.Pipeline
      run: dotnet format --verify-no-changes --verbosity diagnostic
    
  Build:
    name: Build the Project
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      working-directory: ./DotNet.Pipeline
      run: dotnet restore
    - name: Build
      working-directory: ./DotNet.Pipeline
      run: dotnet build --no-restore
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-output
        path: .

  Test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: Build

    steps:
    - name: Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-output
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Run Tests
      working-directory: ./DotNet.Pipeline
      run: dotnet test --no-build --verbosity normal

  Lint:
    name: Lint Code Base
    runs-on: ubuntu-latest

    permissions:
      contents: read
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          dotnet-version: 8.0.x
      - name: Lint Code Base
        uses: github/super-linter@v7
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
          FILTER_REGEX_INCLUDE: '\.(cs|csproj|sln)$'
          FILTER_REGEX_EXCLUDE: '.*'
          VALIDATE_CHECKOV: false

  Snyk:
    name: Snyk Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    - name: Restore dependencies
      working-directory: ./DotNet.Pipeline
      run: dotnet restore
    - name: Install Snyk CLI
      run: npm install -g snyk
    - name: Authenticate Snyk CLI
      working-directory: ./DotNet.Pipeline
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      run: snyk auth $SNYK_TOKEN
    - name: Snyk vulnerability test
      working-directory: ./DotNet.Pipeline
      run: snyk test --all-projects --severity-threshold=high

  SonarQube:
    name: Sonar Scan
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      # - name: Cache SonarQube Cloud packages
      #   uses: actions/cache@v4
      #   with:
      #     path: ~\sonar\cache
      #     key: ${{ runner.os }}-sonar
      #     restore-keys: ${{ runner.os }}-sonar
      # - name: Cache SonarQube Cloud scanner
      #   id: cache-sonar-scanner
      #   uses: actions/cache@v4
      #   with:
      #     path: .\.sonar\scanner
      #     key: ${{ runner.os }}-sonar-scanner
      #     restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarQube Cloud scanner
        working-directory: ./DotNet.Pipeline
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        working-directory: ./DotNet.Pipeline
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"n0tn1w_DotNet-Pipeline" /o:"n0tn1w" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
    
  DockerBuild:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: |
          docker build -t dotnet-pipeline:latest ./DotNet.Pipeline/ShipDataManagement
          docker save dotnet-pipeline:latest -o dotnet-pipeline.tar

      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: dotnet-pipeline.tar

  DockerScanTrivy:
    name: Scan Docker Image with Trivy
    runs-on: ubuntu-latest
    needs: DockerBuild
    steps:
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker Image
        run: |
          docker load -i dotnet-pipeline.tar

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Scan Docker Image
        run: |
          trivy image dotnet-pipeline:latest

  DockerDeploy:
    name: Push Docker Image to Docker Hub
    runs-on: ubuntu-latest
    needs: DockerScanTrivy
    steps:
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker Image
        run: |
          docker load -i dotnet-pipeline.tar

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Tag and Push Docker Image
        run: |
          docker tag dotnet-pipeline:latest ${{ secrets.DOCKER_USERNAME }}/dotnet-pipeline:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/dotnet-pipeline:latest
          
  Terraform:
    name: Deploy on Azure using Terraform
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure login
      uses: azure/login@v2
      with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    - name: Terraform Init
      run: terraform init

    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: tfplan

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan
