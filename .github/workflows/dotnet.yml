
# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  Build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      working-directory: ./DotNet.Pipeline
      run: dotnet restore
    - name: Build
      working-directory: ./DotNet.Pipeline
      run: dotnet build --no-restore
    - name: Test
      working-directory: ./DotNet.Pipeline
      run: dotnet test --no-build --verbosity normal


  Lint:
    name: Lint Code Base
    runs-on: ubuntu-latest

    permissions:
      contents: read
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          dotnet-version: 8.0.x
      - name: Lint Code Base
        uses: github/super-linter@v7
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
          FILTER_REGEX_INCLUDE: '\.(cs|csproj|sln)$'
          FILTER_REGEX_EXCLUDE: '.*'

  Snyk:
    name: Snyk Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    - name: Restore dependencies
      working-directory: ./DotNet.Pipeline
      run: dotnet restore
    - name: Install Snyk CLI
      run: npm install -g snyk
    - name: Authenticate Snyk CLI
      working-directory: ./DotNet.Pipeline
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      run: snyk auth $SNYK_TOKEN
    - name: Snyk vulnerability test
      working-directory: ./DotNet.Pipeline
      run: snyk test --all-projects --severity-threshold=high

  Sonar:
    name: SonarCloud Analysis
    # runs-on: ubuntu-latest
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      # - name: Cache SonarCloud packages
      #   uses: actions/cache@v4
      #   with:
      #     path: ~\sonar\cache
      #     key: ${{ runner.os }}-sonar
      #     restore-keys: ${{ runner.os }}-sonar

      # - name: Cache SonarCloud scanner
      #   id: cache-sonar-scanner
      #   uses: actions/cache@v4
      #   with:
      #     path: .\.sonar\scanner
      #     key: ${{ runner.os }}-sonar-scanner
      #     restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      - name: SonarCloud Begin Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed for PR information
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"n0tn1w_DotNet-Pipeline" /o:"n0tn1w" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"

      - name: Build Project
        run: dotnet build

      - name: SonarCloud End Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
